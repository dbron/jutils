== interpreter ==
  
  *  Display of
       0 "."0 >(,. ' '&,.)&.>/"1] 2 2 $ <"_1 (#: i. 2^#$M) |."_1 _ (3 3 $ '123456789') (<;~2+i.3)} M=.7 7 $ '0'
    vs.

     Display of  
      ] A=: 0 "."0 >(,. ' '&,.)&.>/"1] 2 2 $ <"_1 (#: i. 2^#$M) |."_1 _ (3 3 $ '123456789') (<;~2+i.3)} M=.7 7 $ '0'

   
  *  Get errors under dbr 0 that disappear under dbr 1
  	   dbr 1
	   N=.(  (bom_BOM_@:[ ,    ('(?ix)  (  [0-9a-f]+-  (?:[0-9a-f]+-){3}  [0-9a-f]+  )';'') rxrplc ]) utf8) @:utfread &.> {."1 dirtree 'E:\ais_demo\*.aro'
	   dbr 0
	   N=.(  (bom_BOM_@:[ ,    ('(?ix)  (  [0-9a-f]+-  (?:[0-9a-f]+-){3}  [0-9a-f]+  )';'') rxrplc ]) utf8) @:utfread &.> {."1 dirtree 'E:\ais_demo\*.aro'
	|domain error: hfd
	|   '-'join H<;.1~(+/\0,#&>K)e.~i.#H=.tolower     hfd u dfh;K=.'-'cut y['419c943-4507-4efe-a198-80f08208c7cf'
	   hfd
	'0123456789ABCDEF' {~ 16 #.^:_1 ]
	   ln'hfd'
	hfd_z_ 
	   

  *  `gerund^:n` should be decomitted

  *  bugs reported in http://www.jsoftware.com/pipermail/programming/2007-April/006144.html (crash and hang) should be fixed.

  *  errors jbreak and CTRL+C should be catchable by `try.` or `::`
 
  *  figure out why `{: memr bytes N,N+1`  isn't the same as `memr byte N+1`

  * in unmaphard.ijs {{{
   NB.! Report this bug (?)
   NB.  For some reason (#~ [: y~ mapRefr 5!:1) an=. ...  gives different 
   NB.  results from   an #~ y~ mapRefr 5!:1 an=. ...  
   NB.  and  (#~ y~ mapRefr)  5!:1 an =.   gives a domain error when it shouldn't.}}}

  *  Bother reporting `0 -: 0%_1` but `-. 0 -:&% 0%_1` ?  Probably not.
  *  13 : n  fails if n is a multiline script (contains LFs, is rank 2, is boxed)

  *  'locked_name' f. --> contents of locked name

  *  1.5r2.3  should be an ill formed number
  *  Also it is inconsistent (but perhaps not incorrect wrt the DoJ) to deny  .3  but allow  5j.3  etc.
     (and certainly wrt tokenizing; 5j.3  starts with a digit so the interpreter can recognize it 
     as a number whereas  .3  is two words.  I just would force  5j.3  to be written as  5j0.3  )

  *  goto_label.  doesn't:

        gtch  =:  3 : 0 
           select. y 
                 case. 0 do. goto_case1.   NB.  Considered harmful
                 case. 1 do. label_case1. 'Judge not, lest ye be judged' 
           end.
        )

        |control error
        |   [1]         case. 0 do. goto_case1.   NB.  Considered harmful
        |   gtch=:    3 :0
        NB.  http://www.jsoftware.com/jwiki/System/Interpreter/Requests?action=diff&rev2=191&rev1=190

  *  In	 http://www.jsoftware.com/help/dictionary/d310n.htm
	   2605 174 qdoj ':'
	2.  The explicit result is the result of the last 
	    non-test block sentence executed; that result
	    must be a noun in the 3 : and 4 : cases.

     This should possibly include  13 :  .  Though the phrase 
    "otherwise equivalent to 3 : n" in the description of that
     case might cover it (because the "otherwise" of  13 :  does
     not contain "last-non-test block sentence").

  *  In   http://www.jsoftware.com/help/dictionary/errors.htm
	   5684 239 qdoj 'errors'
	syntax error   )   the result of a sentence is not a 
	                   noun/verb/adverb/conjunction; a verb 
	                   attempting to produce a verb/adverb/
	                   conjunction result

     What about sentences which produce no result?  For example,
     this sentence does not produce a NVAC yet it does not produce a
     syntax error:

	   NB.  Hi.  I'm a valid J sentence.

     See:  http://www.jsoftware.com/jwiki/System/Interpreter/Bugs#do_without_result  

  *  NOT A BUG: 2^_  is _   but  2^56j_  is a limit error.  Why?  Verify the math of  ^  requires this.
       *  This is because  ^ x j. y  involves sin and cosine of  _  and those are undefined (because
          the functions are cyclic, they could be any value.)  That is, the limit error in ^56j_ 
          is actually the one raised by    1 o. _    .

  *  Why can't I gerund-assign a single name?  For example: 
	   '`a b c'=.+`-`*  
	   nc;:'a b c'
	3 3 3
	   
	   '`a b'=.+`-
	   nc;:'a b'
	3 3
	   
	   '`a'=.+`'' 
	   nc;:'a'
	0

     In other words, why this inconsistency:
     
	   3 : ('N=.,a.{~32 ,.~ 97+i.#y';'(''`'',N)=.y';'verb *./ . = 4!:0 ;:N')\. +`-`*
	1 1 0
	   
  *  Atomic rep is permissive:

	(< (,'3') ; < (;:'--') ,<^:1 (,'3'); <;:'---')5!:0
	(< (,'3') ; < (;:'--') ,<^:2 (,'3'); <;:'---')5!:0
	(< (,'3') ; < (;:'--') ,<^:3 (,'3'); <;:'---')5!:0

     All these forms produce the same verb.  Check that 5!:1 doesn't
     document/permit this.

  *  Two bugs in explicit.  See http://www.jsoftware.com/pipermail/general/2007-November/031223.html

  *  Behavior of 2!:5 .  See the file  2xenos5.ijs  in this directory.  Though this may be a "front end" bug because
     it was Eric Iverson, not Roger Hui, who responded to the question "Are there buffer overflow vulnerabilities in the 
     implementation of 2!:5 ?".  See http://www.jsoftware.com/pipermail/programming/2007-November/008823.html

  *  =!.(%2^34) is permitted but 9!:19[2^_34 is not.  The highest global tolerance permitted is % 2 + 2^34 .
     These two facts are not in agreement; I think the second one is wrong because Appendix C, System Conventions
     and limits says "tolerance		less than or equal to 2^_34".
  

== dictionary ==

  *  Section D, Comparatives says "an arbitrary tolerance can be set" but this is not in 
     agreement with Appendix C, System Conventions and limits which says 
     "tolerance		less than or equal to 2^_34".
    

  *  The DoJ says "Names begin with a letter and may continue 
     with letters, underlines, and digits" and "A primary may .. 
     be an inflected name"  .  But that's not true;  
     first, a primitive can be an inflected digit, and a name 
     may not begin with a digit.  Second, an "inflected name" 
     cannot be a primitive unless the name (sans inflection) is
     exactly one character long.  An "inflected name" of 2 or more 
     characters is punctation (i.e. a control word, possibly 
     unspecified).  Though of course  =:  is punctuation and also
     a primitive...
 
  *  explicit def says 
	 The explicit result is the result of the last non-test block sentence executed; 
     ... See Control Structures for the definition of a block. 
     And Control structs say the final execute sentence is returned
     and if there is no such last executed sentence the final
     result is i. 0 0

  *  where does it say     3 : 'select. 0 case.do.end.'0  is ok but
      3 : 'select.case.do.end.'0 is a control error?

  *  Control struct:  "The last sentence executed in a T block 
     is tested for a non-zero value in its leading atom, and 
     determines the block to be executed next."  This is only
     true for if.elseif.else./while.whilst. blocks, and is
     redundant with the language in the pages specific to those blocks.
     It is also true of a T block for a case. statement but NOT for
     a select. statement.  This redundant language is either
     ambiguous (HOW does it determine which block to execute?)
     or incorrect.

     Morever, the language "determining whether the B block after the 
     do. or the rest of the sentence is executed. " is suspect; 
     control words are punctuation, so there are multiple sentences
     after a T block.

  *  The DoJ doesnt say that 1x1x is an ill formed number.

  *  The DoJ doesnt say that 3 : 'if. goto_bob. do. 1 else. label_bob. 2 end.' 0
     is a control error; and it is not consisten with  3 : 'if. return. do. 1 else. 2 end.' 0

  *  Care shoudl be used when equating scripts from  II.H and explicit defs.
     Scripts from  II.H Can contain other scripts, recursively.  Explicits cannot.
     Explicits can contain control words; Scripts from II.H Cannot.  
     0!:n  should document that it requires the II.H kind of script,
     not the explicit kind of script.

  *  Fills in section I should match fills on vocab page for 
     {.  (overtake).  Spefically, section I should mention  s: a:

  *  `3!:6` to document it must be loaded from a file (makes sense; if it weren't in a file, then it was just created, hence ths original text could be available)

  *  The definitions of "attention interrupt", "break", and "input interrupt" at  given in http://www.jsoftware.com/help/user/interrupt.htm  should be documented  http://www.jsoftware.com/help/dictionary/errors.htm or it should at least say "implemented by the frontend" etc.

  * Also in appedix D, the alloction error is spec'd as "insufficient space in a memory-mapped boxed array" but it doesnt only apply to boxed arrays

  *  this isn't a bug, but it's interesting
   At =: 2 : 'u'
   (1 2) 5!:7"1 0 ;:'At'

+-+---------+-+   NB.  Just mentioning u doesn't force the result of 2 : to be a verb,
| |         | |   NB.  and a conj has a fixed valence of 2, so this is right.
+-+---------+-+

+-+---------+-+
|0|1 65535 0|u|
+-+---------+-+
 

   At =: 2 : 'x u'
   (1 2) 5!:7"1 0 ;:'At'
+-+---------+---+
|0|1 65535 0|x u|   NB.  Mentionin a derived verb argument means the rsult must be a verb
+-+---------+---+   NB.  And the default output of an operator is a MONADIC verb

+-+---------+---+
| |         |   |
+-+---------+---+
   At =: 2 : (':';'x u')
   (1 2) 5!:7"1 0 ;:'At'
+-+---------+---+
| |         |   |   NB.  To get a DYADIC verb, you have to include a single 
+-+---------+---+   NB.  line with only a  :  on it.

+-+---------+---+
|0|1 65535 0|x u|
+-+---------+---+
   At =: 2 : ('u y';':';'x u y')
   (1 2) 5!:7"1 0 ;:'At'
+-+---------+-----+
|0|1 65535 0|u y  |
+-+---------+-----+   NB. Both valences.

+-+---------+-----+
|0|1 65535 0|x u y|
+-+---------+-----+

== documentation (non-DoJ) ==

  *  `2!:6` should be added to the release notes

  * Since [ dde was decomitted] in J6.01,  http://www.jsoftware.com/help/user/cmdline.htm should remove /ddetopic  also ddeserer and ddeclient scripts should be removed, also dde labs.

  *  http://www.jsoftware.com/help/user/input_log.htm
     should be ctrl+SHIFT+up and ctrl+SHIFT+down

== frontend ==
  
  * Ctrl+shift+up/dwn in a script window puts the recalled line
    in the script window, overwriting its last line.  It should
    recall the line in the execution window, leaving focus there.


== library ==

   * in scriptserver.ijs {{{

         NB.!  JSTDLIBBUG:  MUST FLOOR BYTE COUNT.
         NB.!  Bug in createjmf_jmf_  if 1{:: y is floating, even 
         NB.!  if  (=<.)  , you'll get errors later on in map_jmf_

         NB.!  JSTDLIBBUG:  
         NB.!  Can't share readonly -- bug in share_jmf_

         NB.!  JSTDLIBBUG:  Can't share non-JMF file as mapped
         NB.!  other J session will require JMF header,
         NB.!  and since that's not stored in non-JMF files
         NB.!  the other J session can't find it. }}}
